//All the off-chain part that interacts with oracle 

import Web3 from "web3";
import {Contract, DeployOptions} from "web3-eth-contract"; 
const fs = require("fs");
const solc = require("solc");
const axios = require("axios").default;

(async () => {

    //Web3 Provider Setup
    const web3Provider = new Web3.providers.WebsocketProvider("ws://localhost:7545");
    const web3 = new Web3(web3Provider);

    // account_pri_key is an account generated by Ganache
    let account = web3.eth.accounts.wallet.add("0x" + "38293cdd50f9d0f6d40e7f4d384584b55131b1d917417527027741af2fa6f257");

    //COMPILE SC
    function findImports(importPath: string) {
        try {
            return {
                contents: fs.readFileSync(`contracts/${importPath}`, "utf8") //find all smarts contracts in smart contracts folder 
            };
        } catch (e: any) {
            return {
                error: e.message
            };
            
        }
    }
    function compileSols(solNames: string[]): any {
        interface SolCollection { [key: string]: any };
        let sources: SolCollection = {};
        solNames.forEach((value: string, index: number, array: string[]) => {
            let sol_file = fs.readFileSync(`contracts/${value}.sol`, "utf8"); //each smart contracts will take out important stuff 
            sources[value] = {
                content: sol_file
            };
        });
        let input = {
            language: "Solidity",
            sources: sources,
            settings: {
                outputSelection: {
                    "*": {
                        "*": ["*"] //Output different stuff if you want, * pull everything from the smart contract 
                    }
                }
            }
        };
        let compiler_output = solc.compile(JSON.stringify(input), { //collects all the compiled smart contracts
            import: findImports
        });
        let output = JSON.parse(compiler_output);
        return output;
    }
    let compiled = compileSols(["Oracle"]);
    // console.log(compiled.contracts.example.CoatIndicator);
    //DEPLOY SC 

    let contract_instance: Contract; //Contract instance 
    let gasPrice: string;
    let contract = new web3.eth.Contract(compiled.contracts["Oracle"]["Oracle"].abi, //Created using name of file 
        undefined, {
            data: "0x" + compiled.contracts["Oracle"]["Oracle"].evm.bytecode.object
        });
    await web3.eth.getGasPrice().then((averageGasPrice) => {
        gasPrice = averageGasPrice; //Get average gas price, as when we deploy SC need gas price 
    }).catch(console.error);

    //assume account balance is sufficient

    await contract.deploy({
        data: contract.options.data,
        arguments: [account.address]
    } as DeployOptions).send({
        from: account.address,
        gasPrice: gasPrice!,
        gas: Math.ceil(1.2 * await contract.deploy({
            data: contract.options.data, //Get a gas estimate and ensure it is correct 
            arguments: [account.address]
        } as DeployOptions).estimateGas({
            from: account.address
        })),
    }).then((instance) => {
        contract_instance = instance;
    }).catch(console.error);

    console.log(contract_instance!.options.address); //Deployed contract address 
    fs.writeFile('./oracle_address.txt', contract_instance!.options.address, function () {});

    // Obtain celebrity information using celebrity API
    
    contract_instance!.events["artistRequest(string)"]()
        .on("connected", function (subscriptionId: any) {
            console.log("listening on event artistRequest");
        })
        .on("data", async function (event: any) {
            let artistName = event.returnValues.name;
            console.log(`ARTIST NAME: ${artistName}`)
            let result = await axios.get(`https://api.api-ninjas.com/v1/celebrity?name=${artistName}`, {
            headers: {"X-Api-Key": "ScbraSBr7ZvXPQf7Dzx1Bg==gPBHLDuAUXziWZME"},
        })
            .then(async function (response: any) {
                console.log(`IS ALIVE: ${response.data[0].is_alive}`);
                return response.data[0].is_alive;
            })
            .catch(function (error: any) {
                console.log(error);
            });

            try {
                contract_instance.methods["responseAlive(bool)"](result).send({
                    from: account.address,
                    gasPrice: gasPrice!,
                    gas: Math.ceil(1.2 * await contract_instance.methods["responseAlive(bool)"]
                    (result).estimateGas({ from: account.address })),
                }).then(function (receipt: any) {
                    return receipt;
                }).catch((err: any) => {
                    console.error(err);
                });
            } catch (e) {
                console.log(e);
            }
        })
        .on("error", function (error: any, receipt: any) {
            console.log(error);
            console.log(receipt);
            console.log("error listening on event artistRequest");
        });


})();